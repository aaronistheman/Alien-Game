Current:
--------

-NOTE: don't forget about testing!!
-create a system for scaling sizes/entities based on world size
	-apply to Player's size (TO TEST: temporarily have player's height equal half of window's height?)
		-Idea #1) World COMPLETELY decides Player size
			-DONE: Player will have to take sizes params (in pixel units) in constructor
			-these appropriate pixel units will have to be decided in World constructor
		-Idea #2) Player knows its dimensions in units of scaled pixels, so World just needs
		to pass it the conversion factor
			-PROBLEM: then Player has to know what scaled pixels are
			-store these dimensions vars in Player
			-pass the conversion factors
		-Idea #3) same as idea #2, but dimensions are stored in data tables instead
			
-player can shoot projectiles
-first enemy (see below for enemy types)


Eventually:
-----------

-pick better Player sprite
-enemy movement
-enemy types
	-dummy (heads straight toward the player)
	-special ones with key characteristics ("bosses")
		-ideas for how they behave:
			-one that alternates between being invisible and visible
			-one that can teleport
			-really big one that doesn't move if it's being shot,
			but that has a lot of health
		-they could have health indicators
-collision detection
	-of enemy with player
		-radial collision detection?
	-of enemy with projectile
-how to end a level?
	-maybe have no levels?
	-have levels?
		-if so, can have the special enemies appear in each level
-different types of player shooters
-KEY FEATURE: only render the stuff in the player's view


Considerable:
-------------

-minimap
-back-end
	-user can log in, log out, and sign in, with the back-end doing
	this authentication
	-save high scores
-sound effects
-background music
-can left click an entity to have its health (and other info)
be shown
-allow user to change screen resolution, instead of the automatic determination
